#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Standart, System and Third party
from collections import namedtuple
from queue import Queue
from threading import Thread

# ROS
import rospy
from std_msgs.msg import String
from std_srvs.srv import Empty

# AIRA
from robonomics_liability.msg import Liability
from robonomics_liability.srv import StartLiability, StartLiabilityRequest
from robonomics_liability.srv import FinishLiability, FinishLiabilityRequest


class WorkerNode:
    def __init__(self):
        rospy.init_node('worker')
        rospy.loginfo('Launching worker node...')

        rospy.Subscriber('/liability/ready', Liability, self.subscribe_and_start)

        rospy.wait_for_service('liability/finish')

        self.liability_proxy = namedtuple('liability_srvs_proxy', ['start', 'finish'])(
                                          rospy.ServiceProxy('liability/start', StartLiability),
                                          rospy.ServiceProxy('liability/finish', FinishLiability))

        rospy.loginfo('Worker node launched.')

    def on_new_liability(self, msg):
        self.liability_queue.put(msg)

    def _process_liability_queue(self):
        while not rospy.is_shutdown() and not self.in_process:
            msg = self.liability_queue.get()
            self.next_liability.publish(msg)

    def subscribe_and_start(self, liability):
        rospy.loginfo("Got new liability %s", liability.address)
        rospy.loginfo('Starting process...')

        self.liability_proxy.start(liability.address)



        self.liability_proxy.finish(liability.address, True)
        rospy.loginfo('Process complete.')

    def spin(self):
        rospy.spin()

if __name__ == '__main__':
    WorkerNode().spin()
